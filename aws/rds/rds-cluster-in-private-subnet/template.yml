AWSTemplateFormatVersion: "2010-09-09"
Description: Private subnet with RDS cluster
Parameters:
  DatabaseName:
    Description:      The database name
    Type:             String
    Default:          cloudformationtemplate
  DatabaseUsername:
    Description:      The database user name
    Type:             String
    Default:          username
  DatabasePassword:
    Description:      The database user password
    Type:             String
    Default:          password
  DatabaseEngine:
    Description:      The database engine
    Type:             String
    Default:          aurora
  DatabaseType:
    Description:      The database type
    Type:             String
    Default:          mysql
  VpcCidr:
    Description:      VPC CIDR
    Type:             String
    Default:          '10.0.0.0/16'
  PublicSubnetCidr:
    Description:      Public subnet CIDR
    Type:             String
    Default:          '10.0.0.0/24'
  PrivateSubnetCidrOne:
    Description:      Public subnet CIDR
    Type:             String
    Default:          '10.0.1.0/24'
  PrivateSubnetCidrTwo:
    Description:      Public subnet CIDR
    Type:             String
    Default:          '10.0.2.0/24'

  EC2ImageId:
    Description:    EC2 AMI Id
    Type:           String
    Default:        "ami-061e7ebbc234015fe"
  EC2InstanceType:
    Description:    Amazon EC2 instance type.
    Type:           String
    Default:        "t2.micro"
    AllowedValues:
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - t2.xlarge
    - t2.2xlarge
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m4.10xlarge
    - m4.16xlarge
    - m5.large
    - m5.xlarge
    - m5.2xlarge
    - m5.4xlarge
    - m5.12xlarge
    - m5.24xlarge
    - m5d.large
    - m5d.xlarge
    - m5d.2xlarge
    - m5d.4xlarge
    - m5d.12xlarge
    - m5d.24xlarge
Mappings:
  Arch2:
    us-east-1:
      HVM64: ami-6869aa05
    us-west-2:
      HVM64: ami-7172b611
    us-west-1:
      HVM64: ami-31490d51
    eu-west-1:
      HVM64: ami-f9dd458a
    eu-central-1:
      HVM64: ami-ea26ce85
    ap-northeast-1:
      HVM64: ami-374db956
    ap-northeast-2:
      HVM64: ami-2b408b45
    ap-southeast-1:
      HVM64: ami-a59b49c6
    ap-southeast-2:
      HVM64: ami-dc361ebf
    ap-south-1:
      HVM64: ami-ffbdd790
    us-east-2:
      HVM64: ami-f6035893
    sa-east-1:
      HVM64: ami-6dd04501
    cn-north-1:
      HVM64: ami-8e6aa0e3
  BeanstalkStackName:
    spring:
      stackName: 64bit Amazon Linux 2018.03 v2.7.7 running Java 8
Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !Ref VpcCidr
      Tags:
      - Key: Application
        Value:
          Ref: 'AWS::StackName'
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: true
      VpcId: !Ref Vpc
      CidrBlock: !Ref PublicSubnetCidr
      AvailabilityZone: !Select [0, !GetAZs {Ref: 'AWS::Region'}]
      Tags:
      - Key: Application
        Value: !Ref AWS::StackName
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref PublicRouteTable
      GatewayId: !Ref InternetGateway
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnetAzOne:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref PrivateSubnetCidrOne
      AvailabilityZone: !Select [1, !GetAZs {Ref: 'AWS::Region'}]
      Tags:
      - Key: Application
        Value: !Ref AWS::StackName
      - Key: Network
        Value: Private
  PrivateSubnetAzTwo:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref PrivateSubnetCidrTwo
      AvailabilityZone: !Select [2, !GetAZs {Ref: 'AWS::Region'}]
      Tags:
      - Key: Application
        Value: !Ref AWS::StackName
      - Key: Network
        Value: Private
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
  PrivateRouteTableAssociationAzOne:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetAzOne
  PrivateRouteTableAssociationAzTwo:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetAzTwo
  PublicSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref Vpc
      GroupDescription: SSH access
      Tags:
      - Key: Application
        Value: !Ref AWS::StackName
  PublicSecurityGroupSSHIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref PublicSecurityGroup
      IpProtocol: tcp
      FromPort: '22'
      ToPort: '22'
      CidrIp: 0.0.0.0/0
  PublicSecurityGroupHTTP80Ingress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref PublicSecurityGroup
      IpProtocol: tcp
      FromPort: '80'
      ToPort: '80'
      CidrIp: 0.0.0.0/0
  PublicSecurityGroupPrivateEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref PublicSecurityGroup
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      DestinationSecurityGroupId: !Ref PrivateSecurityGroup
  PublicSecurityGroupPublicEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref PublicSecurityGroup
      IpProtocol: -1
      CidrIp: 0.0.0.0/0
  PrivateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref Vpc
      GroupDescription: Private Database Security Group
      SecurityGroupIngress:
      - IpProtocol: icmp
        FromPort: -1
        ToPort: -1
        SourceSecurityGroupId: !Ref PublicSecurityGroup
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        SourceSecurityGroupId: !Ref PublicSecurityGroup
      - IpProtocol: udp
        FromPort: 0
        ToPort: 65535
        SourceSecurityGroupId: !Ref PublicSecurityGroup
  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: RDS subnet group
      SubnetIds:
      - !Ref PrivateSubnetAzOne
      - !Ref PrivateSubnetAzTwo
  DatabaseInstance:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Delete #or Snapshot
    Properties:
      DBInstanceClass: db.t2.small
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      Engine: !Ref DatabaseEngine

  # Bastion instance setup below
  BastionInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref EC2InstanceType
      ImageId: !Ref EC2ImageId
      NetworkInterfaces:
      - NetworkInterfaceId: !Ref PublicEth0
        DeviceIndex: '0'
      KeyName: !Ref 'KeyPairName'
      Tags:
      - Key: Application
        Value:
          Ref: 'AWS::StackName'
  PublicEth0:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: eth0
      GroupSet: [!Ref SSHSecurityGroup]
      SourceDestCheck: 'true'
      SubnetId: !Ref PublicSubnet
      Tags:
      - Key: Name
        Value: Interface 0
      - Key: Interface
        Value: eth0

Outputs:
  JdbcConnectionUrl:
    Description: The URL of the Elastic Beanstalk environment
    Value: !Join ['',['jdbc:', !Ref DatabaseType,'://', !GetAtt DatabaseInstance.Endpoint.Address ,':',
                      !GetAtt DatabaseInstance.Endpoint.Port,'/', !Ref DatabaseName]]
