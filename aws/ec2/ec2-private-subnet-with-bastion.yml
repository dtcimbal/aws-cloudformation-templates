AWSTemplateFormatVersion: "2010-09-09"
Description: Creates a private and public subnets with NAT and Bastion EC2 instance
#
# Input params. `KeyPairName` is the only required one
Parameters:
  KeyPairName:
    Description:     EC2 KeyPair.
    Type:           'AWS::EC2::KeyPair::KeyName'
    MinLength:       2
    ConstraintDescription:  must not be blank.

  VpcCidr:
    Description:    VPC CIDR
    Type:           String
    Default:        '10.0.0.0/16'

  PublicSubnetCidr:
    Description:    Public subnet CIDR
    Type:           String
    Default:        '10.0.0.0/24'

  PrivateSubnetCidr:
    Description:    Private subnet CIDR
    Type:           String
    Default:        '10.0.1.0/24'

  SshCidr:
    Description:    SSH location
    Type:           String
    Default:        '0.0.0.0/0'

  EC2ImageId:
    Description:    EC2 AMI Id
    Type:           String
    Default:        "ami-061e7ebbc234015fe"

  EC2InstanceType:
    Description:    Amazon EC2 instance type.
    Type:           String
    Default:        "t2.micro"
    AllowedValues:
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - t2.xlarge
    - t2.2xlarge
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m4.10xlarge
    - m4.16xlarge
    - m5.large
    - m5.xlarge
    - m5.2xlarge
    - m5.4xlarge
    - m5.12xlarge
    - m5.24xlarge
    - m5d.large
    - m5d.xlarge
    - m5d.2xlarge
    - m5d.4xlarge
    - m5d.12xlarge
    - m5d.24xlarge

Resources:
  # VPC setup below
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !Ref VpcCidr
      Tags:
      - Key: Application
        Value:
          Ref: 'AWS::StackName'

  # Security groups setup below
  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref Vpc
      GroupDescription: SSH access
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: !Ref SshCidr
      Tags:
      - Key: Application
        Value:
          Ref: 'AWS::StackName'

  # Public subnet and Internet gateway setup below
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: true
      VpcId: !Ref Vpc
      CidrBlock: !Ref PublicSubnetCidr
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs: {Ref: 'AWS::Region'}
      Tags:
      - Key: Application
        Value:
          Ref: 'AWS::StackName'
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      RouteTableId: !Ref PublicRouteTable
      GatewayId: !Ref InternetGateway
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  # Private subnet and NAT setup below
  NatGatewayAttachment:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachement
    Properties:
      Domain: vpc
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayAttachment.AllocationId
      SubnetId: !Ref PublicSubnet
  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref PrivateSubnetCidr
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs: {Ref: 'AWS::Region'}
      Tags:
      - Key: Application
        Value:
          Ref: 'AWS::StackName'
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref PrivateRouteTable
      NatGatewayId: !Ref NatGateway
  PrivateRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet

  # Bastion instance setup below
  BastionInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref EC2InstanceType
      ImageId: !Ref EC2ImageId
      NetworkInterfaces:
      - NetworkInterfaceId: !Ref PublicEth0
        DeviceIndex: '0'
      KeyName: !Ref 'KeyPairName'
      Tags:
      - Key: Application
        Value:
          Ref: 'AWS::StackName'
  PublicEth0:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: eth0
      GroupSet: [!Ref SSHSecurityGroup]
      SourceDestCheck: 'true'
      SubnetId: !Ref PublicSubnet
      Tags:
      - Key: Name
        Value: Interface 0
      - Key: Interface
        Value: eth0

  # Private instance setup below.
  # The private instance could be an actual worker instance which does the work like
  # processing SQS messages for example
  PrivateEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref EC2InstanceType
      ImageId: !Ref EC2ImageId
      NetworkInterfaces:
      - NetworkInterfaceId: !Ref PrivateEth0
        DeviceIndex: '0'
      KeyName: !Ref KeyPairName
      Tags:
      - Key: Application
        Value:
          Ref: 'AWS::StackName'
  PrivateEth0:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: eth0
      GroupSet: [!Ref SSHSecurityGroup]
      SourceDestCheck: 'true'
      SubnetId: !Ref PrivateSubnet
      Tags:
      - Key: Name
        Value: Interface 0
      - Key: Interface
        Value: eth0

Outputs:
  VpcId:
    Description: The ID of the VPC that this stack is deployed in
    Value: !Ref Vpc
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'VpcId' ] ]
  PublicSubnet:
    Description: Public subnet one
    Value: !Ref PublicSubnet
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PublicSubnet' ] ]

